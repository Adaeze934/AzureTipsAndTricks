(window.webpackJsonp=window.webpackJsonp||[]).push([[222],{657:function(e,s,n){"use strict";n.r(s);var t=n(69),a=Object(t.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),n("p",[e._v("ðŸ”¥  The FREE Azure Developer Guide eBook is available "),n("a",{attrs:{href:"http://aka.ms/azuredevebook?WT.mc_id=docs-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[e._v("ðŸ’¡ Learn more : "),n("a",{attrs:{href:"https://docs.microsoft.com/azure/cosmos-db/change-feed?WT.mc_id=docs-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("Change feed in Azure Cosmos DB"),n("OutboundLink")],1),e._v(".")])]),e._v(" "),n("p",[e._v("This post was brought to you by "),n("strong",[n("a",{attrs:{href:"https://twitter.com/willvelida",target:"_blank",rel:"noopener noreferrer"}},[e._v("Will Velida"),n("OutboundLink")],1)]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"unit-testing-the-azure-cosmos-db-change-feed-in-xunit-and-c"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#unit-testing-the-azure-cosmos-db-change-feed-in-xunit-and-c"}},[e._v("#")]),e._v(" Unit testing the Azure Cosmos DB change feed in xUnit and C#")]),e._v(" "),n("p",[e._v("Writing unit tests for Azure Functions that are invoked by CosmosDB Triggers is quite simple.")]),e._v(" "),n("p",[e._v("In this article, we're going to set up a simple Azure Function that's triggered by the Azure Cosmos DB change feed and then setup and write a basic unit test for that function using "),n("a",{attrs:{href:"https://xunit.net?WT.mc_id=other-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("xUnit"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("h4",{attrs:{id:"what-is-the-change-feed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#what-is-the-change-feed"}},[e._v("#")]),e._v(" What is the change feed?")]),e._v(" "),n("p",[e._v("The Azure Cosmos DB change feed is a persistent record of changes that take place in a container in the order that they occur. It listens to any changes in a container and then outputs a sorted list of documents that were changed in the order in which they were modified.")]),e._v(" "),n("p",[e._v("You can work with the Azure Cosmos DB change feed using either "),n("a",{attrs:{href:"https://docs.microsoft.com/azure/cosmos-db/change-feed-functions?WT.mc_id=docs-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("Azure Functions"),n("OutboundLink")],1),e._v(" or with the "),n("a",{attrs:{href:"https://docs.microsoft.com/azure/cosmos-db/change-feed-processor?WT.mc_id=docs-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("change feed processor"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("h4",{attrs:{id:"writing-our-change-feed-function"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#writing-our-change-feed-function"}},[e._v("#")]),e._v(" Writing our change feed Function")]),e._v(" "),n("p",[e._v("If you want to follow along, you'll need the following:")]),e._v(" "),n("ul",[n("li",[e._v("An Azure subscription (If you don't have an Azure subscription, create a "),n("a",{attrs:{href:"https://azure.microsoft.com/free/?WT.mc_id=azure-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("free account"),n("OutboundLink")],1),e._v(" before you begin)")]),e._v(" "),n("li",[e._v("An existing Azure Cosmos DB account with a database called "),n("em",[e._v("PizzaParlourDB")]),e._v(" and two containers called "),n("em",[e._v("Customers")]),e._v(" and "),n("em",[e._v("CustomersAggregate")]),e._v(". How you provision throughput isn't important.")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.Azure.Documents;\nusing Microsoft.Azure.WebJobs;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing PizzaParlour.Core.Models;\nusing PizzaParlour.CustomerManager.Aggregate.Repositories;\n\nnamespace PizzaParlour.CustomerManager.Aggregate.Functions\n{\n    public class CustomerFeed\n    {\n        private readonly ILogger<CustomerFeed> _logger;\n        private readonly ICustomerAggregateRepository _customerAggregateRepository;\n\n        public CustomerFeed(\n            ILogger<CustomerFeed> logger,\n            ICustomerAggregateRepository customerAggregateRepository)\n        {\n            _logger = logger;\n            _customerAggregateRepository = customerAggregateRepository;\n        }\n\n        [FunctionName(nameof(CustomerFeed))]\n        public async Task Run([CosmosDBTrigger(\n            databaseName: "PizzaParlourDB",\n            collectionName: "Customers",\n            ConnectionStringSetting = "CosmosDBConnectionString",\n            LeaseCollectionName = "leases",\n            CreateLeaseCollectionIfNotExists = true,\n            LeaseCollectionPrefix = "Customers")]IReadOnlyList<Document> input)\n        {\n            try\n            {\n                if (input != null && input.Count > 0)\n                {\n                    foreach (var document in input)\n                    {\n                        var customer = JsonConvert.DeserializeObject<Customer>(document.ToString());\n\n                        await _customerAggregateRepository.UpsertCustomer(customer);\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Exception thrown: {ex.Message}");\n                throw;\n            }            \n        }\n    }\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br"),n("span",{staticClass:"line-number"},[e._v("54")]),n("br")])]),n("p",[e._v("This function does the following:")]),e._v(" "),n("ul",[n("li",[e._v("Listens to the â€˜"),n("em",[e._v("Customers")]),e._v("â€™ container inside the â€˜"),n("em",[e._v("PizzaParlourDB")]),e._v("â€™ database.")]),e._v(" "),n("li",[e._v("Creates a lease collection if it doesnâ€™t exist. This controls the checkpoint of our change feed.")]),e._v(" "),n("li",[e._v("Creates a list of documents. This will be ordered in the order that the documents were modified.")]),e._v(" "),n("li",[e._v("If there are documents in the list, the Function iterates through each document, attempts to deserialize the document into a Customer object and then upserts that Customer into our read-optimized store.")])]),e._v(" "),n("h4",{attrs:{id:"writing-our-change-feed-unit-test"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#writing-our-change-feed-unit-test"}},[e._v("#")]),e._v(" Writing our change feed Unit Test")]),e._v(" "),n("p",[e._v("Letâ€™s write up a simple unit test for our change feed function:")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("using Microsoft.Azure.Documents;\nusing Microsoft.Extensions.Logging;\nusing Moq;\nusing Newtonsoft.Json;\nusing PizzaParlour.Core.Models;\nusing PizzaParlour.CustomerManager.Aggregate.Functions;\nusing PizzaParlour.CustomerManager.Aggregate.Repositories;\nusing PizzaParlour.CustomerManager.Aggregate.UnitTests.Helpers;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Xunit;\n\nnamespace PizzaParlour.CustomerManager.Aggregate.UnitTests.FunctionTests\n{\n    public class CustomerFeedShould\n    {\n        private Mock<ILogger<CustomerFeed>> _loggerMock;\n        private Mock<ICustomerAggregateRepository> _customerAggregateRepoMock;\n\n        private CustomerFeed _func;\n\n        public CustomerFeedShould()\n        {\n            _loggerMock = new Mock<ILogger<CustomerFeed>>();\n            _customerAggregateRepoMock = new Mock<ICustomerAggregateRepository>();\n\n            _func = new CustomerFeed(\n                _loggerMock.Object,\n                _customerAggregateRepoMock.Object);\n        }\n\n        [Fact]\n        public async Task UpsertNewDocument()\n        {\n            // Arrange\n            var documentList = new List<Document>();\n            var testCustomer = TestDataGenerator.GenerateCustomer();\n            var customerDocument = ConvertCustomerObjectToDocument(testCustomer);\n            documentList.Add(customerDocument);\n\n            // Act\n            await _func.Run(documentList);\n\n            // Assert\n            _customerAggregateRepoMock.Verify(\n                r => r.UpsertCustomer(It.IsAny<Customer>()), Times.Once);\n        }\n\n        private Document ConvertCustomerObjectToDocument(Customer customer)\n        {\n            var customerJSON = JsonConvert.SerializeObject(customer);\n            var document = new Document();\n            document.LoadFrom(new JsonTextReader(new StringReader(customerJSON)));\n\n            return document;\n        }\n    }\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br"),n("span",{staticClass:"line-number"},[e._v("54")]),n("br"),n("span",{staticClass:"line-number"},[e._v("55")]),n("br"),n("span",{staticClass:"line-number"},[e._v("56")]),n("br"),n("span",{staticClass:"line-number"},[e._v("57")]),n("br"),n("span",{staticClass:"line-number"},[e._v("58")]),n("br"),n("span",{staticClass:"line-number"},[e._v("59")]),n("br")])]),n("p",[e._v("Letâ€™s step through our "),n("em",[e._v("UpsertNewDocument()")]),e._v(" test:")]),e._v(" "),n("p",[e._v("First, we create a new list of Documents. This will be our list that we use to invoke our Function. We then want to generate a test customer to add to our list. Before we can add this test customer to our list, weâ€™ll need to convert it to a Document.\nFor this purpose, Iâ€™ve got a private method that takes a Customer object, serializes it to JSON and then loads that JSON object into our Document and returns it.")]),e._v(" "),n("p",[e._v("Once our customer has been converted into a Document type, we then add it to our list. We then pass our list with our Customer document to invoke the function.")]),e._v(" "),n("p",[e._v("In my function, I have a Repository class that takes care of the Upsert logic for me, so Iâ€™m just verifying that the Repository method fires at least once, since I only have one Customer document in my list.")]),e._v(" "),n("h4",{attrs:{id:"conclusion"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion")]),e._v(" "),n("p",[e._v("This was a very basic example on how we can write unit tests for our change feed functions. Depending on how you are using and configuring change feed functions, your tests might need to be more comprehensive than this basic sample.")]),e._v(" "),n("p",[e._v("Hopefully this gives you some guidance on how you can write Unit tests for Azure Functions that are triggered by the change feed.")])])}),[],!1,null,null,null);s.default=a.exports}}]);